{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","cardArray","robots","map","element","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OAEA,yBAAKC,UAAU,oDACP,yBAAKC,IAAG,+BAA2BF,EAA3B,YAAyCG,IAAI,QACrD,yBAAKF,UAAU,MACX,4BAAKH,GACL,2BAAIC,MCILK,EAXE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACUC,KAAI,SAACC,EAASC,GAEpC,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAQR,GAAIA,GAAIQ,EAAQR,GAAIF,KAAMU,EAAQV,KAAMC,MAAOS,EAAQT,WAEpF,OACI,kBAAC,WAAD,KACCM,ICGMM,EAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKX,UAAU,oBACX,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCIPI,EAXA,SAACC,GAEZ,OAGI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrCH,EAAMI,WCgBJC,E,YApBX,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KACDM,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GAErBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAQG,KAAKJ,MAAMC,SAEf,2DAAuCG,KAAKV,MAAMI,a,GAlBlCQ,aC0DbC,G,kBAnDX,aAAe,IAAD,8BACV,+CAgBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IANP,E,iFAUO,IAAD,OAEhBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAEnEF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAOjC,MAEyBb,KAAKJ,MAA5BjB,EAFF,EAEEA,OAAQ2B,EAFV,EAEUA,YAETQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAKzD,OAAStC,EAAOwC,OAIZ,yBAAK7C,UAAU,MACf,wBAAIA,UAAU,MAAd,eAGA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KAGI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,OAZ1B,wBAAIxC,UAAU,MAAd,yB,GAjCM4B,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.59a26c84.chunk.js","sourcesContent":["import React from 'react'\n\n//Card function that is rendered within index.js\nconst Card = ({name, email, id}) => {\n    return (\n        //tachyon styling\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src= {`https://robohash.org/${id}?200x200`} alt=\"pic\"/>\n            <div className=\"tc\">\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n\n","import React, {Fragment} from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    const cardArray = robots.map((element, i) => {\n        //key property is used to identify specific Card component\n       return <Card key={element.id} id={element.id} name={element.name} email={element.email}/>\n    })\n    return (\n        <Fragment>\n        {cardArray}\n        </Fragment>       \n    )\n}\nexport default CardList","import React from 'react'\n//Search input component that has an onChange that calls a searchChange method from App.js(parent)\nconst SearchBox = ({ searchChange }) => {\n    return(\n        <div className=\"pa2 bb b--silver\">\n            <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"search friends\"\n            onChange={searchChange}/>    \n        </div>\n    )\n}\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    // create a scrollable by passing through props and using props.children\n    return(\n        //add style using javascript {{}}\n        //make CardList Component scrollable\n        <div style={{overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n    //initialize props\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n//lifecycle hook that catches errors\n    componentDidCatch(error, errorInfo) {\n        //if there is an error, set the state.hasError property to true\n        this.setState({hasError: true})\n      }\n\n    render() {\n        //if this.state.hasError is true\n        return (this.state.hasError) ? \n        //return an error : or render the children\n            <h1>Oops...An error has Occured</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundary\n\n","import React, { Component } from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n    //    Declare the state within constructor\n    //Something that can change the app and lives in the parent component\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        //fetch is a tool on the window object that allows us to make requests\n        fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json())\n        //update state after fetch\n        .then(users => this.setState({robots: users}))\n    }\n    //onSearchChange method to get user input\n    onSearchChange = (event) => {\n        //updates state searchfield to users input\n        this.setState({ searchfield: event.target.value})\n    }\n    render() {\n        //destructure properties to access within this.state\n        const {robots, searchfield} = this.state\n        //filter into new array the robots based on the searchfield state\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        //add loading message if 'fetch' is still retrieving data\n        //ternary operator to return \n        // if there is no length in array\n        return (!robots.length) ?\n            <h1 className=\"tc\">Loading Robots...</h1> :\n            (\n        //else if has length then return\n            <div className=\"tc\">\n            <h1 className=\"f1\">RoboFriends</h1>\n            {/* Scrollable component */}\n            {/* SearchBox has prop of searchChange method*/}\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n            {/* if there is an error boundary the children will display an error message\n            or if there are no errors, the children will run */}\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n            </Scroll>\n            </div>\n        )\n    }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}